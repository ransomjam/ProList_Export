// PDF generation utilities using jsPDF

import jsPDF from 'jspdf';
import QRCode from 'qrcode';
import { formatFcfa } from './currency';
import type { ShipmentWithItems, Product, Partner, Company } from '@/mocks/seeds';

interface DocumentMeta {
  number: string;
  date: string;
  signatureName?: string;
}

interface RenderResult {
  dataUrl: string;
  fileName: string;
}

// Generate QR code data URL
const generateQR = async (data: any): Promise<string> => {
  try {
    return await QRCode.toDataURL(JSON.stringify(data));
  } catch (error) {
    console.error('QR generation failed:', error);
    return '';
  }
};

// Render HTML template to PDF
const renderHTMLToPDF = async (
  htmlContent: string,
  fileName: string,
  qrData: any
): Promise<RenderResult> => {
  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Create temporary container
  const container = document.createElement('div');
  container.innerHTML = htmlContent;
  container.style.position = 'absolute';
  container.style.left = '-9999px';
  container.style.width = '210mm';
  container.style.backgroundColor = 'white';
  document.body.appendChild(container);
  
  try {
    // Generate QR code if data provided
    let qrCodeUrl = '';
    if (qrData) {
      qrCodeUrl = await generateQR(qrData);
    }
    
    // Basic text-based PDF generation (simplified approach)
    pdf.setFontSize(20);
    pdf.text(fileName.includes('Invoice') ? 'COMMERCIAL INVOICE' : 'PACKING LIST', 20, 30);
    
    // Add footer with timestamp
    const timestamp = new Date().toLocaleString('en-GB');
    pdf.setFontSize(8);
    pdf.text(`Generated by ProList Demo • Not a legal document • ${timestamp}`, 20, pageHeight - 10);
    
    // Add QR code if available
    if (qrCodeUrl) {
      try {
        pdf.addImage(qrCodeUrl, 'PNG', pageWidth - 30, pageHeight - 30, 20, 20);
      } catch (error) {
        console.warn('Failed to add QR code to PDF:', error);
      }
    }
    
    const dataUrl = pdf.output('dataurlstring');
    
    return {
      dataUrl,
      fileName: `${fileName}.pdf`,
    };
  } finally {
    // Clean up
    document.body.removeChild(container);
  }
};

export const renderInvoicePDF = async (
  shipment: ShipmentWithItems,
  company: Company,
  buyer: Partner,
  items: Array<{product: Product; quantity: number}>,
  totals: {value: number; weight: number; items: number},
  meta: DocumentMeta
): Promise<RenderResult> => {
  const qrData = {
    shipmentRef: shipment.reference,
    docKey: 'INVOICE',
    number: meta.number,
    version: 1,
    timestamp: Date.now(),
  };

  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Header
  pdf.setFontSize(24);
  pdf.setFont('helvetica', 'bold');
  pdf.text('ProList', 20, 25);
  
  pdf.setFontSize(16);
  pdf.text('COMMERCIAL INVOICE', 20, 35);
  
  // Invoice details
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Invoice No: ${meta.number}`, 20, 50);
  pdf.text(`Date: ${meta.date}`, 20, 55);
  pdf.text(`Shipment: ${shipment.reference}`, 20, 60);
  
  // Company details
  pdf.setFont('helvetica', 'bold');
  pdf.text('From:', 20, 75);
  pdf.setFont('helvetica', 'normal');
  pdf.text(company.name, 20, 82);
  pdf.text(company.address, 20, 87);
  pdf.text(`TIN: ${company.tin}`, 20, 92);
  
  // Buyer details
  pdf.setFont('helvetica', 'bold');
  pdf.text('To:', 120, 75);
  pdf.setFont('helvetica', 'normal');
  pdf.text(buyer.name, 120, 82);
  if (buyer.address) {
    const addressLines = buyer.address.split(',');
    addressLines.forEach((line, index) => {
      pdf.text(line.trim(), 120, 87 + (index * 5));
    });
  }
  
  // Shipment details
  pdf.setFont('helvetica', 'bold');
  pdf.text('Shipment Details:', 20, 110);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Route: ${shipment.route}`, 20, 117);
  pdf.text(`Incoterm: ${shipment.incoterm}`, 20, 122);
  pdf.text(`Mode: ${shipment.mode}`, 20, 127);
  pdf.text('Currency: XAF (FCFA)', 20, 132);
  
  // Items table header
  let yPos = 150;
  pdf.setFont('helvetica', 'bold');
  pdf.text('Product', 20, yPos);
  pdf.text('HS Code', 80, yPos);
  pdf.text('Qty', 120, yPos);
  pdf.text('Unit Price', 140, yPos);
  pdf.text('Line Value', 170, yPos);
  
  // Table line
  pdf.line(20, yPos + 2, 190, yPos + 2);
  yPos += 10;
  
  // Items
  pdf.setFont('helvetica', 'normal');
  items.forEach((item) => {
    const totalValue = item.product.unit_price_fcfa * item.quantity;
    pdf.text(item.product.name, 20, yPos);
    pdf.text(item.product.hs_code, 80, yPos);
    pdf.text(item.quantity.toString(), 120, yPos);
    pdf.text(formatFcfa(item.product.unit_price_fcfa), 140, yPos);
    pdf.text(formatFcfa(totalValue), 170, yPos);
    yPos += 8;
  });
  
  // Total
  yPos += 10;
  pdf.line(140, yPos - 5, 190, yPos - 5);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Total (FCFA):', 140, yPos);
  pdf.text(formatFcfa(totals.value), 170, yPos);
  
  // QR Code and footer
  const qrCodeUrl = await generateQR(qrData);
  if (qrCodeUrl) {
    try {
      pdf.addImage(qrCodeUrl, 'PNG', pageWidth - 35, pageHeight - 35, 25, 25);
    } catch (error) {
      console.warn('Failed to add QR code:', error);
    }
  }
  
  // Footer
  pdf.setFontSize(8);
  pdf.setFont('helvetica', 'normal');
  const timestamp = new Date().toLocaleString('en-GB');
  pdf.text(`Generated by ProList Demo • Not a legal document • ${timestamp}`, 20, pageHeight - 10);
  
  const dataUrl = pdf.output('dataurlstring');
  
  return {
    dataUrl,
    fileName: `${meta.number}_Commercial_Invoice.pdf`,
  };
};

export const renderProformaPDF = async (params: {
  shipment: ShipmentWithItems;
  company: Company;
  buyer: Partner;
  costLines: any[];
  summary: any;
  meta: DocumentMeta;
}): Promise<RenderResult> => {
  const { shipment, company, buyer, costLines, summary, meta } = params;
  
  const qrData = {
    shipmentRef: shipment.reference,
    docKey: 'PROFORMA',
    number: meta.number,
    version: 1,
    timestamp: Date.now(),
  };

  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Header
  pdf.setFontSize(24);
  pdf.setFont('helvetica', 'bold');
  pdf.text('ProList', 20, 25);
  
  pdf.setFontSize(16);
  pdf.text('PRO-FORMA INVOICE', 20, 35);
  
  // Document details
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Pro-forma No: ${meta.number}`, 20, 50);
  pdf.text(`Date: ${meta.date}`, 20, 55);
  pdf.text(`Shipment: ${shipment.reference}`, 20, 60);
  
  // Company details
  pdf.setFont('helvetica', 'bold');
  pdf.text('From:', 20, 75);
  pdf.setFont('helvetica', 'normal');
  pdf.text(company.name, 20, 82);
  pdf.text(company.address, 20, 87);
  
  // Buyer details
  pdf.setFont('helvetica', 'bold');
  pdf.text('To:', 120, 75);
  pdf.setFont('helvetica', 'normal');
  pdf.text(buyer.name, 120, 82);
  if (buyer.address) {
    const addressLines = buyer.address.split(',');
    addressLines.forEach((line, index) => {
      pdf.text(line.trim(), 120, 87 + (index * 5));
    });
  }
  
  // Cost lines table
  let yPos = 120;
  pdf.setFont('helvetica', 'bold');
  pdf.text('Description', 20, yPos);
  pdf.text('Type', 100, yPos);
  pdf.text('Amount', 150, yPos);
  
  pdf.line(20, yPos + 2, 190, yPos + 2);
  yPos += 10;
  
  pdf.setFont('helvetica', 'normal');
  costLines.forEach((line) => {
    pdf.text(line.label, 20, yPos);
    pdf.text(line.type, 100, yPos);
    pdf.text(formatFcfa(line.amount_fcfa), 150, yPos);
    yPos += 8;
  });
  
  // Totals
  yPos += 10;
  pdf.line(100, yPos - 5, 190, yPos - 5);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Subtotal:', 100, yPos);
  pdf.text(formatFcfa(summary.subtotal_fcfa), 150, yPos);
  yPos += 8;
  pdf.text('Tax:', 100, yPos);
  pdf.text(formatFcfa(summary.tax_fcfa), 150, yPos);
  yPos += 8;
  pdf.text('Total:', 100, yPos);
  pdf.text(formatFcfa(summary.total_fcfa), 150, yPos);
  
  // QR Code and footer
  const qrCodeUrl = await generateQR(qrData);
  if (qrCodeUrl) {
    try {
      pdf.addImage(qrCodeUrl, 'PNG', pageWidth - 35, pageHeight - 35, 25, 25);
    } catch (error) {
      console.warn('Failed to add QR code:', error);
    }
  }
  
  // Footer
  pdf.setFontSize(8);
  pdf.setFont('helvetica', 'normal');
  const timestamp = new Date().toLocaleString('en-GB');
  pdf.text(`Generated by ProList Demo • Not a legal document • ${timestamp}`, 20, pageHeight - 10);
  
  const dataUrl = pdf.output('dataurlstring');
  
  return {
    dataUrl,
    fileName: `${meta.number}_Proforma_Invoice.pdf`,
  };
};

export const renderReceiptPDF = async (params: {
  shipment: ShipmentWithItems;
  company: Company;
  payment: any;
  summary: any;
  meta: DocumentMeta;
}): Promise<RenderResult> => {
  const { shipment, company, payment, summary, meta } = params;
  
  const qrData = {
    shipmentRef: shipment.reference,
    docKey: 'RECEIPT',
    number: meta.number,
    version: 1,
    timestamp: Date.now(),
  };

  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Header
  pdf.setFontSize(24);
  pdf.setFont('helvetica', 'bold');
  pdf.text('ProList', 20, 25);
  
  pdf.setFontSize(16);
  pdf.text('PAYMENT RECEIPT', 20, 35);
  
  // Receipt details
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Receipt No: ${meta.number}`, 20, 50);
  pdf.text(`Date: ${meta.date}`, 20, 55);
  pdf.text(`Shipment: ${shipment.reference}`, 20, 60);
  
  // Company details
  pdf.setFont('helvetica', 'bold');
  pdf.text('Received by:', 20, 75);
  pdf.setFont('helvetica', 'normal');
  pdf.text(company.name, 20, 82);
  pdf.text(company.address, 20, 87);
  
  // Payment details
  pdf.setFont('helvetica', 'bold');
  pdf.text('Payment Details:', 20, 105);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Method: ${payment.method.replace('_', ' ').toUpperCase()}`, 20, 112);
  pdf.text(`Amount: ${formatFcfa(payment.amount_fcfa)}`, 20, 119);
  if (payment.reference) {
    pdf.text(`Reference: ${payment.reference}`, 20, 126);
  }
  pdf.text(`Date: ${new Date(payment.paid_at).toLocaleDateString('en-GB')}`, 20, 133);
  if (payment.note) {
    pdf.text(`Note: ${payment.note}`, 20, 140);
  }
  
  // Summary
  let yPos = 160;
  pdf.setFont('helvetica', 'bold');
  pdf.text('Account Summary:', 20, yPos);
  pdf.setFont('helvetica', 'normal');
  yPos += 10;
  pdf.text(`Total Due: ${formatFcfa(summary.total_fcfa)}`, 20, yPos);
  yPos += 8;
  pdf.text(`Total Paid: ${formatFcfa(summary.paid_fcfa)}`, 20, yPos);
  yPos += 8;
  pdf.text(`Balance: ${formatFcfa(summary.balance_fcfa)}`, 20, yPos);
  
  // QR Code and footer
  const qrCodeUrl = await generateQR(qrData);
  if (qrCodeUrl) {
    try {
      pdf.addImage(qrCodeUrl, 'PNG', pageWidth - 35, pageHeight - 35, 25, 25);
    } catch (error) {
      console.warn('Failed to add QR code:', error);
    }
  }
  
  // Footer
  pdf.setFontSize(8);
  pdf.setFont('helvetica', 'normal');
  const timestamp = new Date().toLocaleString('en-GB');
  pdf.text(`Generated by ProList Demo • Not a legal document • ${timestamp}`, 20, pageHeight - 10);
  
  const dataUrl = pdf.output('dataurlstring');
  
  return {
    dataUrl,
    fileName: `${meta.number}_Payment_Receipt.pdf`,
  };
};

export const renderPackingListPDF = async (
  shipment: ShipmentWithItems,
  company: Company,
  buyer: Partner,
  items: Array<{product: Product; quantity: number}>,
  totals: {value: number; weight: number; items: number},
  meta: DocumentMeta
): Promise<RenderResult> => {
  const qrData = {
    shipmentRef: shipment.reference,
    docKey: 'PACKING_LIST',
    number: meta.number,
    version: 1,
    timestamp: Date.now(),
  };

  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Header
  pdf.setFontSize(24);
  pdf.setFont('helvetica', 'bold');
  pdf.text('ProList', 20, 25);
  
  pdf.setFontSize(16);
  pdf.text('PACKING LIST', 20, 35);
  
  // Document details
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Packing List No: ${meta.number}`, 20, 50);
  pdf.text(`Date: ${meta.date}`, 20, 55);
  pdf.text(`Shipment: ${shipment.reference}`, 20, 60);
  
  // Company details
  pdf.setFont('helvetica', 'bold');
  pdf.text('Exporter:', 20, 75);
  pdf.setFont('helvetica', 'normal');
  pdf.text(company.name, 20, 82);
  pdf.text(company.address, 20, 87);
  
  // Buyer details
  pdf.setFont('helvetica', 'bold');
  pdf.text('Consignee:', 120, 75);
  pdf.setFont('helvetica', 'normal');
  pdf.text(buyer.name, 120, 82);
  if (buyer.address) {
    const addressLines = buyer.address.split(',');
    addressLines.forEach((line, index) => {
      pdf.text(line.trim(), 120, 87 + (index * 5));
    });
  }
  
  // Shipment details
  pdf.setFont('helvetica', 'bold');
  pdf.text('Shipment Details:', 20, 110);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Mode of Transport: ${shipment.mode}`, 20, 117);
  pdf.text(`Route: ${shipment.route}`, 20, 122);
  
  // Packages table header
  let yPos = 140;
  pdf.setFont('helvetica', 'bold');
  pdf.text('Product', 20, yPos);
  pdf.text('Packages', 80, yPos);
  pdf.text('Net Weight (kg)', 120, yPos);
  pdf.text('Gross Weight (kg)', 160, yPos);
  
  // Table line
  pdf.line(20, yPos + 2, 190, yPos + 2);
  yPos += 10;
  
  // Items
  pdf.setFont('helvetica', 'normal');
  let totalNetWeight = 0;
  let totalGrossWeight = 0;
  
  items.forEach((item) => {
    const netWeight = (item.product.weight_kg || 0) * item.quantity;
    const grossWeight = netWeight * 1.02; // 2% tare weight
    totalNetWeight += netWeight;
    totalGrossWeight += grossWeight;
    
    pdf.text(item.product.name, 20, yPos);
    pdf.text(`${item.quantity} packages`, 80, yPos);
    pdf.text(netWeight.toFixed(1), 120, yPos);
    pdf.text(grossWeight.toFixed(1), 160, yPos);
    yPos += 8;
  });
  
  // Totals
  yPos += 10;
  pdf.line(80, yPos - 5, 190, yPos - 5);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Total:', 80, yPos);
  pdf.text(totalNetWeight.toFixed(1), 120, yPos);
  pdf.text(totalGrossWeight.toFixed(1), 160, yPos);
  
  // QR Code and footer
  const qrCodeUrl = await generateQR(qrData);
  if (qrCodeUrl) {
    try {
      pdf.addImage(qrCodeUrl, 'PNG', pageWidth - 35, pageHeight - 35, 25, 25);
    } catch (error) {
      console.warn('Failed to add QR code:', error);
    }
  }
  
  // Footer
  pdf.setFontSize(8);
  pdf.setFont('helvetica', 'normal');
  const timestamp = new Date().toLocaleString('en-GB');
  pdf.text(`Generated by ProList Demo • Not a legal document • ${timestamp}`, 20, pageHeight - 10);
  
  const dataUrl = pdf.output('dataurlstring');
  
  return {
    dataUrl,
    fileName: `${meta.number}_Packing_List.pdf`,
  };
};